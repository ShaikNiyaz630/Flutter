Question 01: You have to develop a cake-ordering application that allows users to place orders for cakes and view them on the admin panel. The application will have the following features:
User-friendly interface for placing cake orders, including options for customizing the cake such as size.
Securing authentication for the users to place orders and for the admin to view them.
Creating the Admin panel to view all orders placed by users and update the status of orders.
Making use of Firebase to store order data.
Note: This final project will provide you with the opportunity to apply the concepts and techniques covered throughout the course to create a functional, production-ready application. This project will include the use of advanced features like Firebase integration, push notifications, and user authentication.
The potential UI design of the admin app and the User app is given as follows:
1) Admin Panel UI Screenshot:
2) Admin UI dialog box:
3) User Login UI:
4) User Menu UI:
5) User Drawer UI:
6) Order status UI:

Source code :
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { 
  getAuth, signInAnonymously, signInWithCustomToken, createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, signOut, onAuthStateChanged 
} from 'firebase/auth';
import { 
  getFirestore, doc, addDoc, setDoc, updateDoc, onSnapshot, collection, query, 
  where, orderBy, serverTimestamp 
} from 'firebase/firestore';
// FIX: Corrected the icon imports to use standard Lucide React naming (e.g., Menu instead of LuMenu)
import { Menu, ShoppingCart, LogOut, CheckCircle, Loader, Package, Truck, User, Key, Home, Edit, MapPin, Phone, DollarSign } from 'lucide-react';

// --- CONFIGURATION & CONSTANTS ---

// Global variables provided by the environment
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
const appId = typeof __app_id !== 'undefined' ? __app_id : 'cake-app-default';

// Hardcoded Admin Email for access to the Admin Panel
const ADMIN_EMAIL = 'admin@cakeapp.com'; 

const PRIMARY_COLOR = 'bg-pink-600';
const ACCENT_COLOR = 'bg-yellow-400';

const CAKE_FLAVORS = [
  { name: 'Chocolate Fudge', price: 25.00, image: 'https://placehold.co/300x200/964B00/ffffff?text=Fudge+Cake' },
  { name: 'Vanilla Bean', price: 22.50, image: 'https://placehold.co/300x200/F3E5AB/000000?text=Vanilla+Cake' },
  { name: 'Red Velvet Delight', price: 28.00, image: 'https://placehold.co/300x200/A01633/ffffff?text=Red+Velvet' },
  { name: 'Strawberry Frosted', price: 26.50, image: 'https://placehold.co/300x200/FF69B4/ffffff?text=Strawberry+Cake' },
];

const ORDER_STATUSES = [
  'Received',
  'Preparing',
  'Out for Delivery',
  'Delivered'
];

// --- FIREBASE INITIALIZATION ---

let db = null;
let auth = null;
let app = null;
let isFirebaseReady = false;

try {
  if (Object.keys(firebaseConfig).length > 0) {
    app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    auth = getAuth(app);
    isFirebaseReady = true;
  } else {
    console.error("Firebase config is missing.");
  }
} catch (error) {
  console.error("Error initializing Firebase:", error);
}

// --- UTILITY COMPONENTS ---

const Button = ({ children, onClick, className = '', disabled = false, color = PRIMARY_COLOR }) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className={`w-full py-3 px-4 text-white font-bold rounded-xl shadow-lg transition duration-200 
                ${color} ${className} 
                ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90 active:scale-[0.98]'}
               `}
  >
    {children}
  </button>
);

const Card = ({ children, className = '' }) => (
  <div className={`bg-white p-6 rounded-2xl shadow-xl ${className}`}>
    {children}
  </div>
);

const InputField = ({ type = 'text', placeholder, value, onChange, icon, label, inputClassName = '' }) => (
  <div className="mb-4">
    {label && <label className="block text-gray-700 text-sm font-bold mb-2">{label}</label>}
    <div className="flex items-center bg-white rounded-xl shadow-md p-3 border border-gray-200 focus-within:border-pink-500">
      {icon && React.createElement(icon, { className: "text-pink-500 mr-3 h-5 w-5 flex-shrink-0" })}
      <input
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className={`flex-grow focus:outline-none text-gray-800 ${inputClassName}`}
      />
    </div>
  </div>
);

const Modal = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70 p-4" onClick={onClose}>
      <Card 
        className={`${PRIMARY_COLOR.replace('bg-', 'bg-')} text-white w-full max-w-lg shadow-2xl`}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex justify-between items-start mb-4">
          <h2 className="text-2xl font-extrabold">{title}</h2>
          <button onClick={onClose} className="text-xl font-bold p-1 hover:text-yellow-300 transition">&times;</button>
        </div>
        <div className="bg-white text-gray-800 p-6 rounded-xl shadow-inner">
          {children}
        </div>
      </Card>
    </div>
  );
};

// --- AUTHENTICATION PAGE ---

const AuthPage = () => {
  const [isRegister, setIsRegister] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    if (!isFirebaseReady || !auth) {
      setError("Firebase is not initialized.");
      setLoading(false);
      return;
    }

    try {
      if (isRegister) {
        await createUserWithEmailAndPassword(auth, email, password);
      } else {
        await signInWithEmailAndPassword(auth, email, password);
      }
    } catch (err) {
      // Clean up common error messages for better user experience
      let errorMessage = err.message || 'Authentication failed.';
      if (errorMessage.includes('auth/invalid-credential')) {
        errorMessage = 'Invalid email or password.';
      } else if (errorMessage.includes('auth/email-already-in-use')) {
        errorMessage = 'This email is already registered. Try logging in.';
      }
      setError(errorMessage);
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 p-4">
      <h1 className="text-5xl font-extrabold text-pink-600 mb-2 drop-shadow-lg">CakeApp</h1>
      <p className="text-gray-500 mb-8 text-lg font-medium">The sweetest orders, served fast.</p>
      <Card className="w-full max-w-md text-center">
        
        <form onSubmit={handleSubmit}>
          <InputField 
            type="email" 
            placeholder="Email" 
            value={email} 
            onChange={(e) => setEmail(e.target.value)} 
            icon={User}
            label="Email"
          />
          <InputField 
            type="password" 
            placeholder="Password" 
            value={password} 
            onChange={(e) => setPassword(e.target.value)} 
            icon={Key}
            label="Password"
            inputClassName="tracking-widest"
          />

          <div className="flex justify-between items-center my-6 space-x-4">
            <Button 
              onClick={() => setIsRegister(true)} 
              type="submit" 
              className={`flex-1 ${isRegister ? PRIMARY_COLOR : 'bg-gray-400'}`} 
              disabled={loading || !email || !password}
              color={isRegister ? PRIMARY_COLOR : 'bg-gray-400'}
            >
              {loading && isRegister ? 'Registering...' : 'Register'}
            </Button>
            
            <Button 
              onClick={() => setIsRegister(false)} 
              type="submit" 
              className={`flex-1 ${!isRegister ? PRIMARY_COLOR : 'bg-gray-400'}`} 
              disabled={loading || !email || !password}
              color={!isRegister ? PRIMARY_COLOR : 'bg-gray-400'}
            >
              {loading && !isRegister ? 'Logging In...' : 'Login'}
            </Button>
          </div>
          {error && <p className="text-red-500 text-sm font-medium mt-2 p-2 bg-red-50 rounded-lg border border-red-200">{error}</p>}
        </form>
        <p className="text-sm mt-4 text-gray-500">
          <button 
            onClick={() => { setIsRegister(!isRegister); setError(''); }} 
            className="text-pink-600 font-bold hover:underline"
          >
            Switch to {isRegister ? 'Login' : 'Register'}
          </button> mode.
        </p>
      </Card>
      <p className="mt-4 text-xs text-gray-400">Admin Email for testing: **{ADMIN_EMAIL}**</p>
    </div>
  );
};

// --- USER MENU / ORDER PLACEMENT PAGE ---

const UserMenuPage = ({ setPage, userId, userEmail }) => {
  const [selectedCake, setSelectedCake] = useState(null);
  const [customization, setCustomization] = useState({ size: '1kg', address: '', phoneNumber: '' });
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [orderSuccess, setOrderSuccess] = useState(false);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);

  const handleSelectCake = (cake) => {
    setSelectedCake(cake);
    // Reset customization for a new order
    setCustomization({ size: '1kg', address: '', phoneNumber: '' }); 
    setIsModalOpen(true);
  };

  const handlePlaceOrder = async () => {
    if (!db || !selectedCake || !customization.address || !customization.phoneNumber) {
      console.error("Validation failed: All fields must be filled.");
      return;
    }

    setIsPlacingOrder(true);
    setOrderSuccess(false);

    try {
      // Determine final price based on the selected size (simplified logic)
      const sizeMultiplier = parseFloat(customization.size.replace('kg', ''));
      const finalPrice = selectedCake.price * sizeMultiplier;

      const newOrder = {
        userId,
        userEmail,
        cakeName: selectedCake.name,
        size: customization.size,
        price: finalPrice,
        address: customization.address,
        phoneNumber: customization.phoneNumber,
        status: ORDER_STATUSES[0], // 'Received'
        timestamp: serverTimestamp(),
      };

      // 1. Add order to User's Private Collection
      const userOrdersRef = collection(db, `/artifacts/${appId}/users/${userId}/orders`);
      const docRef = await addDoc(userOrdersRef, newOrder);
      
      // 2. Mirror order to Public Admin Collection for visibility, using the same ID
      const adminOrdersRef = doc(db, `/artifacts/${appId}/public/data/all_orders`, docRef.id);
      await setDoc(adminOrdersRef, newOrder);
      
      setOrderSuccess(true);
      setTimeout(() => {
        setIsModalOpen(false);
        setOrderSuccess(false);
        setSelectedCake(null);
      }, 2000);

    } catch (error) {
      console.error("Error placing order: ", error);
      alert("Failed to place order. Please check the console for details.");
    } finally {
      setIsPlacingOrder(false);
    }
  };

  const CakeItem = ({ cake }) => (
    <Card 
      className="flex flex-col items-center justify-between p-4 cursor-pointer hover:shadow-2xl transition duration-300 transform hover:scale-[1.02] bg-gradient-to-br from-white to-pink-50"
      onClick={() => handleSelectCake(cake)}
    >
      <img
        src={cake.image}
        alt={cake.name}
        className="w-full h-32 object-cover rounded-xl mb-3 shadow-md"
        onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/300x200/964B00/ffffff?text=Cake" }}
      />
      <h3 className="text-xl font-bold text-gray-800 text-center mb-1">{cake.name}</h3>
      <div className="flex items-center justify-between w-full mt-2">
        <span className="text-2xl font-extrabold text-pink-600 flex items-center">
          <DollarSign className="h-5 w-5 mr-1" />{cake.price.toFixed(2)}
        </span>
        <button className="p-2 rounded-full bg-pink-500 text-white hover:bg-pink-600 transition shadow-lg active:scale-95">
          <ShoppingCart className="h-5 w-5" />
        </button>
      </div>
    </Card>
  );

  const handleLogout = async () => {
    if (auth) {
      await signOut(auth);
    }
  };

  const Drawer = () => (
    <div 
      className={`fixed top-0 left-0 h-full w-64 ${PRIMARY_COLOR} transform transition-transform duration-300 p-6 z-40 
        ${isDrawerOpen ? 'translate-x-0' : '-translate-x-full'} shadow-2xl`}
      onClick={(e) => e.stopPropagation()}
    >
      <div className="flex flex-col h-full text-white">
        <h2 className="text-3xl font-extrabold mb-10 text-yellow-300">CakeApp</h2>
        
        <div className="flex flex-col space-y-4 flex-grow">
          <div className="p-2 border-b border-pink-500 mb-4">
             <p className="text-sm">User ID: <span className="font-mono text-xs">{userId}</span></p>
          </div>
          <button 
            onClick={() => { setPage('user_menu'); setIsDrawerOpen(false); }}
            className="text-white text-lg font-medium p-3 rounded-xl hover:bg-pink-700 transition flex items-center text-left"
          >
            <Home className="mr-3 h-5 w-5" /> Menu
          </button>
          <button 
            onClick={() => { setPage('order_status'); setIsDrawerOpen(false); }}
            className={`${ACCENT_COLOR.replace('bg-', 'bg-')} text-gray-900 text-lg font-bold p-3 rounded-xl hover:opacity-95 transition flex items-center text-left shadow-md`}
          >
            <Package className="mr-3 h-5 w-5" /> My Orders
          </button>
          <div className="mt-auto pt-6 border-t border-pink-500">
            <Button onClick={handleLogout} color="bg-red-500" className="flex items-center justify-center">
              <LogOut className="mr-2 h-5 w-5" /> Logout
            </Button>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Drawer Overlay */}
      {isDrawerOpen && <div className="fixed inset-0 bg-black bg-opacity-30 z-30" onClick={() => setIsDrawerOpen(false)}></div>}
      
      <Drawer />

      {/* Header (App Bar) */}
      <header className={`sticky top-0 w-full p-4 text-white shadow-xl flex justify-between items-center ${PRIMARY_COLOR} z-20`}>
        <button onClick={() => setIsDrawerOpen(true)}>
          <Menu className="h-6 w-6 hover:text-yellow-300 transition" />
        </button>
        <h1 className="text-xl font-bold">Welcome, {userEmail.split('@')[0]}!</h1>
        <button onClick={() => setPage('order_status')} className="p-1 rounded-full hover:bg-pink-700 transition">
          <ShoppingCart className="h-6 w-6" />
        </button>
      </header>

      <main className="p-4 max-w-6xl mx-auto">
        <h2 className="text-3xl font-extrabold text-gray-900 mt-4 mb-6">Choose Your Cake</h2>
        
        {/* Cake Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {CAKE_FLAVORS.map((cake, index) => (
            <CakeItem key={index} cake={cake} />
          ))}
        </div>

        <h2 className="text-2xl font-bold text-gray-800 mt-12 mb-4">Quick Links</h2>
        <div className="grid grid-cols-2 gap-4">
          <Card className="p-4 text-center bg-purple-100 border-l-4 border-purple-500 hover:shadow-lg transition cursor-pointer">
            <h3 className="font-bold text-lg text-purple-800">Custom Orders</h3>
            <p className="text-sm text-purple-600">Request special designs</p>
          </Card>
          <Card className="p-4 text-center bg-green-100 border-l-4 border-green-500 hover:shadow-lg transition cursor-pointer">
            <h3 className="font-bold text-lg text-green-800">Best Sellers</h3>
            <p className="text-sm text-green-600">See our top picks</p>
          </Card>
        </div>
      </main>

      {/* Order Modal */}
      <Modal 
        isOpen={isModalOpen} 
        onClose={() => !isPlacingOrder && setIsModalOpen(false)} 
        title={`Customize: ${selectedCake?.name || ''}`}
      >
        {selectedCake && (
          <div className="space-y-4">
            <p className="text-xl font-extrabold text-center border-b pb-2 mb-4">
              Total Est. Price: 
              <span className="text-pink-600 ml-2">
                ${(selectedCake.price * parseFloat(customization.size.replace('kg', ''))).toFixed(2)}
              </span>
            </p>
            
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">Cake Size</label>
              <div className="flex space-x-2">
                {['1kg', '2kg', '3kg'].map(size => (
                  <button 
                    key={size}
                    onClick={() => setCustomization(c => ({ ...c, size }))}
                    className={`flex-1 px-4 py-2 rounded-xl text-md font-semibold transition shadow-md 
                      ${customization.size === size ? 'bg-pink-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                  >
                    {size}
                  </button>
                ))}
              </div>
            </div>

            <InputField 
              label="Delivery Address" 
              placeholder="123 Sweet Street, City, Zip" 
              value={customization.address} 
              onChange={(e) => setCustomization(c => ({ ...c, address: e.target.value }))}
              icon={MapPin}
            />
            <InputField 
              label="Phone Number" 
              type="tel"
              placeholder="+1 555-555-5555" 
              value={customization.phoneNumber} 
              onChange={(e) => setCustomization(c => ({ ...c, phoneNumber: e.target.value }))}
              icon={Phone}
            />
            
            {orderSuccess ? (
              <div className="flex flex-col items-center justify-center p-4 bg-green-100 text-green-700 rounded-xl border-2 border-green-400">
                <CheckCircle className="h-8 w-8 mb-2 animate-bounce" />
                <p className="font-bold">Order Placed Successfully!</p>
                <p className="text-sm mt-1">Check the My Orders page for tracking.</p>
              </div>
            ) : (
              <Button 
                onClick={handlePlaceOrder} 
                disabled={isPlacingOrder || !customization.address || !customization.phoneNumber} 
                className={isPlacingOrder ? 'bg-gray-500' : `${ACCENT_COLOR}`}
                color={isPlacingOrder ? 'bg-gray-500' : ACCENT_COLOR}
              >
                {isPlacingOrder ? <span className="flex items-center justify-center"><Loader className="h-5 w-5 mr-2 animate-spin" /> Placing Order...</span> : 'Confirm Order'}
              </Button>
            )}
            
          </div>
        )}
      </Modal>
    </div>
  );
};

// --- USER ORDER HISTORY PAGE ---

const OrderHistoryPage = ({ setPage, userId }) => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!db || !userId) return;
    
    // Query orders for the current user, sorted by timestamp descending
    const q = query(
      collection(db, `/artifacts/${appId}/users/${userId}/orders`),
      where("userId", "==", userId),
      orderBy("timestamp", "desc")
    );

    setLoading(true);
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const fetchedOrders = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      // Sort in memory to ensure delivered orders are last, but still keep latest on top
      fetchedOrders.sort((a, b) => {
        if (a.status === 'Delivered' && b.status !== 'Delivered') return 1;
        if (a.status !== 'Delivered' && b.status === 'Delivered') return -1;
        // Fallback to time if statuses are the same or neither is delivered
        if (a.timestamp && b.timestamp) {
            return b.timestamp.seconds - a.timestamp.seconds;
        }
        return 0;
    });

      setOrders(fetchedOrders);
      setLoading(false);
    }, (error) => {
      console.error("Error fetching orders:", error);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [userId]);

  const getStatusColor = (status) => {
    switch (status) {
      case 'Received': return 'bg-blue-100 text-blue-800 border-blue-400';
      case 'Preparing': return 'bg-yellow-100 text-yellow-800 border-yellow-400';
      case 'Out for Delivery': return 'bg-green-100 text-green-800 border-green-400';
      case 'Delivered': return 'bg-pink-500 text-white border-pink-700';
      default: return 'bg-gray-200 text-gray-800 border-gray-400';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'Received': return Package;
      case 'Preparing': return Edit;
      case 'Out for Delivery': return Truck;
      case 'Delivered': return CheckCircle;
      default: return Loader;
    }
  };

  const getProgressSteps = (currentStatus) => {
    const statusIndex = ORDER_STATUSES.indexOf(currentStatus);
    return ORDER_STATUSES.map((s, index) => ({
      name: s,
      icon: getStatusIcon(s),
      completed: index <= statusIndex,
      active: index === statusIndex
    }));
  };

  const StatusTracker = ({ status }) => {
    const steps = getProgressSteps(status);
    return (
      <div className="flex justify-between items-start space-x-2 my-4 pt-4 border-t border-gray-100">
        {steps.map((step, index) => (
          <div key={index} className="flex flex-col items-center flex-1 min-w-0">
            <div className={`relative flex flex-col items-center`}>
              {/* Icon Circle */}
              <div 
                className={`w-10 h-10 rounded-full flex items-center justify-center transition-all duration-500 shadow-lg mb-1
                  ${step.completed ? 'bg-pink-600 text-white' : 'bg-gray-300 text-gray-500'}
                  ${step.active ? 'ring-4 ring-pink-300 scale-110' : ''}`}
              >
                <step.icon className="h-5 w-5" />
              </div>

              {/* Connecting Line */}
              {index < steps.length - 1 && (
                <div className={`absolute left-full top-1/4 -mt-2.5 h-1 w-full transition-all duration-500 z-0 ${steps[index+1].completed ? 'bg-pink-600' : 'bg-gray-300'}`}></div>
              )}
            </div>
             <p className={`text-center text-xs mt-2 font-medium transition-colors ${step.active ? 'text-pink-600 font-bold' : 'text-gray-500'}`}>{step.name}</p>
          </div>
        ))}
      </div>
    );
  };

  const OrderItem = ({ order }) => (
    <Card className="mb-6 p-4 sm:p-6 hover:shadow-2xl transition duration-300">
      <div className="flex justify-between items-start mb-3 border-b pb-3">
        <div>
          <p className="text-xl font-extrabold text-gray-800">{order.cakeName} - {order.size}</p>
          <p className="text-sm text-gray-500">
            Placed: {order.timestamp ? new Date(order.timestamp.seconds * 1000).toLocaleString() : 'Loading...'}
          </p>
        </div>
        <div className={`px-4 py-2 rounded-full font-bold text-sm border-2 shadow-inner ${getStatusColor(order.status)}`}>
          {order.status}
        </div>
      </div>
      
      <p className="text-lg font-bold text-pink-600 mb-2">Total: ${order.price ? order.price.toFixed(2) : 'N/A'}</p>
      <p className="text-sm text-gray-600 mb-4 flex items-center"><MapPin className="h-4 w-4 mr-2 text-pink-400" /> Delivering to: {order.address}</p>

      {/* Status Tracker */}
      <StatusTracker status={order.status} />

    </Card>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header (App Bar) */}
      <header className={`sticky top-0 w-full p-4 text-white shadow-xl flex items-center ${PRIMARY_COLOR} z-20`}>
        <button onClick={() => setPage('user_menu')} className="p-1 rounded-full hover:bg-pink-700 transition">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>
        </button>
        <h1 className="text-xl font-bold">My Order Status</h1>
      </header>

      <main className="p-4 max-w-4xl mx-auto">
        <h2 className="text-3xl font-extrabold text-gray-900 my-4">Order History</h2>

        {loading && <div className="text-center p-12"><Loader className="h-10 w-10 animate-spin mx-auto text-pink-500" /> <p className="mt-4 text-gray-600 text-lg">Loading orders in real-time...</p></div>}

        {!loading && orders.length === 0 && <p className="text-center text-gray-500 p-12 text-lg">You haven't placed any orders yet! <button onClick={() => setPage('user_menu')} className="text-pink-600 hover:underline">Start ordering now.</button></p>}

        {!loading && orders.map(order => (
          <OrderItem key={order.id} order={order} />
        ))}
      </main>
    </div>
  );
};


// --- ADMIN PANEL PAGE ---

const AdminPanelPage = ({ userId, userEmail }) => {
  const [allOrders, setAllOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [currentStatus, setCurrentStatus] = useState(ORDER_STATUSES[0]);

  // Public Collection Path for all orders: /artifacts/{appId}/public/data/all_orders/{documentId}
  useEffect(() => {
    if (!db) return;
    
    const q = query(
      collection(db, `/artifacts/${appId}/public/data/all_orders`),
      orderBy("timestamp", "desc")
    );

    setLoading(true);
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const fetchedOrders = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setAllOrders(fetchedOrders);
      setLoading(false);
    }, (error) => {
      console.error("Error fetching admin orders:", error);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [userId]);


  const handleOpenUpdateModal = (order) => {
    setSelectedOrder(order);
    setCurrentStatus(order.status);
    setIsModalOpen(true);
  };

  const handleUpdateStatus = async () => {
    if (!db || !selectedOrder) return;

    try {
      // 1. Update the order in the Admin's view (Public Collection)
      const adminOrderRef = doc(db, `/artifacts/${appId}/public/data/all_orders`, selectedOrder.id);
      await updateDoc(adminOrderRef, { status: currentStatus });

      // 2. Update the order in the User's view (Private Collection)
      const userOrderRef = doc(db, `/artifacts/${appId}/users/${selectedOrder.userId}/orders`, selectedOrder.id);
      await updateDoc(userOrderRef, { status: currentStatus });

      setIsModalOpen(false);
      setSelectedOrder(null);
      // NOTE: The UI update will happen automatically via the onSnapshot listeners
      
    } catch (error) {
      console.error("Error updating order status:", error);
      alert("Failed to update status. Check console for details.");
    }
  };

  const handleLogout = async () => {
    if (auth) {
      await signOut(auth);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Received': return 'bg-blue-500 text-white';
      case 'Preparing': return 'bg-yellow-500 text-gray-800';
      case 'Out for Delivery': return 'bg-green-500 text-white';
      case 'Delivered': return 'bg-pink-600 text-white';
      default: return 'bg-gray-400 text-white';
    }
  };

  const OrderCard = ({ order }) => (
    <Card className="mb-4 transition-all duration-300 hover:shadow-2xl">
      <div className="flex justify-between items-start mb-3 border-b pb-3">
        <div>
          <p className="text-xl font-extrabold text-gray-800">{order.cakeName} ({order.size})</p>
          <p className="text-sm text-gray-500">Order ID: <span className="font-mono text-xs">{order.id}</span></p>
          <p className="text-sm text-gray-500">User: {order.userEmail}</p>
        </div>
        <div className={`px-3 py-1 rounded-lg font-bold text-sm shadow-md ${getStatusColor(order.status)}`}>
          {order.status}
        </div>
      </div>

      <div className="text-md space-y-1 mb-4">
        <p className="font-semibold text-pink-600 flex items-center"><DollarSign className="h-4 w-4 mr-2" /> Price: ${order.price ? order.price.toFixed(2) : 'N/A'}</p>
        <p className="text-gray-700 flex items-center"><MapPin className="h-4 w-4 mr-2 text-pink-400" /> Address: {order.address}</p>
        <p className="text-gray-700 flex items-center"><Phone className="h-4 w-4 mr-2 text-pink-400" /> Phone: {order.phoneNumber}</p>
        <p className="text-xs text-gray-400 mt-2">Placed: {order.timestamp ? new Date(order.timestamp.seconds * 1000).toLocaleString() : 'N/A'}</p>
      </div>

      <Button onClick={() => handleOpenUpdateModal(order)} color="bg-indigo-500" className="mt-2 text-sm">
        Update Status
      </Button>
    </Card>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header (App Bar) */}
      <header className={`sticky top-0 w-full p-4 text-white shadow-xl flex justify-between items-center ${PRIMARY_COLOR} z-20`}>
        <h1 className="text-2xl font-extrabold">Admin Panel</h1>
        <Button onClick={handleLogout} color="bg-red-500" className="w-auto px-4 py-2 text-sm flex items-center">
          <LogOut className="h-4 w-4 mr-2" /> Logout
        </Button>
      </header>

      <main className="p-4 max-w-5xl mx-auto">
        <h2 className="text-3xl font-extrabold text-gray-900 my-4">All Customer Orders ({allOrders.length})</h2>

        {loading && <div className="text-center p-12"><Loader className="h-10 w-10 animate-spin mx-auto text-pink-500" /> <p className="mt-4 text-gray-600 text-lg">Loading all orders...</p></div>}

        {!loading && allOrders.length === 0 && <p className="text-center text-gray-500 p-12 text-lg">No orders have been placed yet.</p>}

        {!loading && allOrders.map(order => (
          <OrderCard key={order.id} order={order} />
        ))}
      </main>

      {/* Status Update Modal */}
      <Modal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        title={`Update Status for ${selectedOrder?.cakeName || 'Order'}`}
      >
        <div className="space-y-4">
          <p className="text-sm font-semibold">Current Status: <span className={`font-bold ${getStatusColor(selectedOrder?.status || 'N/A').split(' ')[1]}`}>{selectedOrder?.status}</span></p>
          <p className="text-sm font-semibold">User: {selectedOrder?.userEmail}</p>

          <label className="block text-gray-700 text-sm font-bold mb-2">Select New Status</label>
          <select 
            value={currentStatus} 
            onChange={(e) => setCurrentStatus(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-xl focus:ring-pink-500 focus:border-pink-500 shadow-inner appearance-none"
          >
            {ORDER_STATUSES.map(status => (
              <option key={status} value={status}>{status}</option>
            ))}
          </select>

          <Button onClick={handleUpdateStatus} color="bg-green-600">
            Confirm Status Change
          </Button>
        </div>
      </Modal>
    </div>
  );
};


// --- MAIN APP COMPONENT ---

const App = () => {
  const [page, setPage] = useState('auth'); // 'auth', 'user_menu', 'order_status', 'admin_panel'
  const [userId, setUserId] = useState(null);
  const [userEmail, setUserEmail] = useState(null);
  const [loadingAuth, setLoadingAuth] = useState(true);

  // 1. Handle Initial Auth and Token Sign-in
  useEffect(() => {
    if (!isFirebaseReady || !auth) {
      setLoadingAuth(false);
      return;
    }

    const initialAuth = async () => {
      try {
        if (initialAuthToken) {
          await signInWithCustomToken(auth, initialAuthToken);
        } else {
          // Fallback to anonymous sign-in if no custom token is available
          await signInAnonymously(auth);
        }
      } catch (error) {
        console.error("Initial auth failed:", error);
      }
    };
    initialAuth();
  }, []);

  // 2. Handle Auth State Changes and Page Routing
  useEffect(() => {
    if (!isFirebaseReady || !auth) return;

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        const email = user.email || (user.isAnonymous ? 'anonymous@user.com' : 'Guest User');
        setUserId(user.uid);
        setUserEmail(email);

        // Check for admin status
        if (email === ADMIN_EMAIL) {
          setPage('admin_panel');
        } else {
          setPage('user_menu');
        }
      } else {
        setUserId(null);
        setUserEmail(null);
        setPage('auth');
      }
      setLoadingAuth(false);
    });

    return () => unsubscribe();
  }, []);

  const renderPage = () => {
    if (loadingAuth || !isFirebaseReady) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="text-center p-8">
             <Loader className="h-12 w-12 animate-spin mx-auto text-pink-600" />
             <p className="mt-4 text-gray-700 font-medium">Initializing Application...</p>
          </div>
        </div>
      );
    }

    switch (page) {
      case 'auth':
        return <AuthPage />;
      case 'user_menu':
        return <UserMenuPage setPage={setPage} userId={userId} userEmail={userEmail} />;
      case 'order_status':
        return <OrderHistoryPage setPage={setPage} userId={userId} />;
      case 'admin_panel':
        return <AdminPanelPage userId={userId} userEmail={userEmail} />;
      default:
        return <AuthPage />;
    }
  };

  return (
    <div className="font-sans min-h-screen">
      {renderPage()}
    </div>
  );
};

export default App;
